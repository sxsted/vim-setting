set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ==============================================================
" active pkugins

Plugin 'fisadev/FixedTaskList.vim'
Plugin 'Yggdroot/indentLine'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/taglist.vim'
Plugin 'vim-scripts/matchit.zip'

" 快速註解
Plugin 'scrooloose/nerdcommenter'

" 自動補齊 & term_for_vim
Plugin 'Valloric/YouCompleteMe'
Plugin 'marijnh/tern_for_vim'

" 語法檢查
Plugin 'scrooloose/syntastic'

" 快速插入符號：" ' {[ ...
Plugin 'tpope/vim-surround'

" repeat
Plugin 'tpope/vim-repeat'

" ==============================================================
" plugin setting and mappings
map <F2> : TaskList<CR>
map <F3> : IndentLinesToggle<CR>
nmap <F4> <ESC>:NERDTree<CR>
nmap <F5> :TagbarToggle<CR>
nmap <F6> :Tlist<CR>

"utf8 setting
set fileencoding=utf-8
set fileencodings=utf-8,big5,euc-jp,gbk,euc-kr,utf-bom,iso8859-1
set encoding=utf-8
set tenc=utf-8
set fenc=utf-8
set shell=/bin/sh

"配合語法檢查plugin，所設定的配置
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['jshint']

"快捷切換編碼
"set <C-u>=^U
"set <C-b>=^B
"map <C-u> :set fileencoding=utf8
"map <C-b> :set fileencoding=big5

"鍵盤上下改為 翻頁且置中，左右改為前後分頁切換且置中
nnoremap <up> <C-U>zz
nnoremap <down> <C-D>zz
nnoremap <left> :N<CR><Esc>zz
nnoremap <right> :n<CR><Esc>zz

"使用 ;; 代替 <esc>
inoremap ;; <Esc>

" 自動補齊括號
inoremap ( ()<LEFT>
inoremap [ []<LEFT>
inoremap { {}<LEFT>
" 單，雙引號補齊
inoremap ' ''<LEFT>
inoremap " ""<LEFT>

"自動縮排
set autoindent
set smartindent


"搜尋不分大小寫
set ic

"增加底線
set cursorline

"Expand TABs to spaces
set expandtab
"Sets the number of columns for a TAB
set shiftwidth=4
"Sets the number of columns for a TAB
set softtabstop=4
"The width of a TAB is set to 4.
set tabstop=4

"直線
"set cursorcolumn
"set cursorline

set cindent

"vim支援 256色
set t_Co=256

syntax enable
syntax on
set background=dark
"colorscheme vanzan_color
"colorscheme blackboard
colorscheme desert
"colorscheme darkblue
"colorscheme primary 
"colorscheme PerfectDark 
"colorscheme solarized

set nocompatible
set nu
set nobackup
set nowritebackup
set noswapfile

" remember info about open buffers on close
set viminfo^=%

" autocomplete js
set omnifunc=javascriptcomplete#CompleteJS
"delete utf8 bom
set nobomb

"搜尋到的字加heightlight
set hlsearch
set incsearch

"可以用{{{}}}縮排folded
"manual 手工折疊
"indent 縮進折疊
"expr   表達式折疊
"syntax 語法折疊
"diff   對沒有更改的文件折曡
"marker 標記折疊
set foldenable
set foldmethod=marker


set autoread
"status line

"vim 啟用滑鼠
set mouse=a

"設置代碼匹配，包括括號匹配情況
set showmatch

com! -bang W :w
com! -bang Q :q

" open file show last position
if has("autocmd")
   autocmd BufRead *.txt set tw=78
   autocmd BufReadPost *
      \ if line("'\"") > 0 && line ("'\"") <= line("$") |
      \   exe "normal g'\"" |
      \ endif
endif

"編輯文件時，標記時間
":autocmd BufWritePre,FileWritePre *.html   ks|call LastMod()|'s
":  fun LastMod()
":    if line("$") > 20
":      let l = 20
":    else
":      let l = line("$")
":    endif
":    exe "1," . l . "g/Last modified: /s/Last modified: .*/Last modified: " .
":    \ strftime("%Y %b %d")
":  endfun


autocmd BufNewFile *.html  0r ~/.vim/html.txt

" 在開tmux時，會根據你vim的檔名，去編輯label
autocmd BufReadPost,FileReadPost,BufNewFile,BufEnter * call system("tmux rename-window 'vim | " . expand("%:t") . "'")
autocmd VimLeave * call system("tmux rename-window 'tmux'")

" 总是显示状态行
"set laststatus=2
"set statusline=%<[%F]\ %m%=\ %h%r\ %-19([%p%%]\ %3l,%02c%03V%)%y
"highlight StatusLine term=bold,reverse cterm=bold,reverse ctermfg=8

"status bar
set laststatus=2 
set statusline=%4*%<\ %1*[%F] 
set statusline+=%4*\ %5*[%{&encoding}, " encoding 
set statusline+=%{&fileformat}]%m " file format 
set statusline+=%4*%=\ %6*%y%4*\ %3*%l%4*,\ %3*%c%4*\ \<\ %2*%P%4*\ \> 
highlight User1 ctermfg=red 
highlight User2 term=underline cterm=underline ctermfg=green 
highlight User3 term=underline cterm=underline ctermfg=yellow 
highlight User4 term=underline cterm=underline ctermfg=white 
highlight User5 ctermfg=cyan 
highlight User6 ctermfg=white 

"trim whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
autocmd BufWritePre     *.js :call TrimWhiteSpace()
autocmd BufWritePre     *.css :call TrimWhiteSpace()
autocmd BufWritePre     *.html :call TrimWhiteSpace()
